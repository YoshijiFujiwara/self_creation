{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport { EPropName } from \"~/data/ui_frameworks/material_ui/components/Button/interface\";\nexport const makeRandomId = length => {\n  let result = \"\";\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const charactersLength = characters.length;\n\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n};\n\nconst mapToComponentProps = props => {\n  // TODO: タイプアサーションはあんまり良くないらしい\n  _Object$keys(props).reduce((accumulator, propName) => {\n    if (propName === EPropName.CLASSES || propName === EPropName.COMPONENT) return accumulator;\n    accumulator[propName] = props[propName].value;\n    return accumulator;\n  }, {});\n}; // export const mapToComponentProps = (props: TProp[]): TComponentProps => {\n//   return props.reduce(\n//     (accumulator: Record<string, any>, currentValue: TProp) => {\n//       if (currentValue.name === \"children\") return accumulator;\n//       accumulator[currentValue.name] = currentValue.default;\n//       return accumulator;\n//     },\n//     {}\n//   );\n// };","map":{"version":3,"sources":["/Users/yoshiji/webdev/javascript/self_creation/ui_next/src/utils.ts"],"names":["EPropName","makeRandomId","length","result","characters","charactersLength","i","charAt","Math","floor","random","mapToComponentProps","props","reduce","accumulator","propName","CLASSES","COMPONENT","value"],"mappings":";AACA,SAAqBA,SAArB,QAAqC,8DAArC;AAEA,OAAO,MAAMC,YAAY,GAAIC,MAAD,IAA4B;AACtD,MAAIC,MAAM,GAAG,EAAb;AACA,QAAMC,UAAU,GACd,gEADF;AAEA,QAAMC,gBAAgB,GAAGD,UAAU,CAACF,MAApC;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAApB,EAA4BI,CAAC,EAA7B,EAAiC;AAC/BH,IAAAA,MAAM,IAAIC,UAAU,CAACG,MAAX,CAAkBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,gBAA3B,CAAlB,CAAV;AACD;;AACD,SAAOF,MAAP;AACD,CATM;;AAWP,MAAMQ,mBAAmB,GAAIC,KAAD,IAAwB;AAClD;AACC,eAAYA,KAAZ,CAAD,CAAoCC,MAApC,CACE,CAACC,WAAD,EAAmCC,QAAnC,KAA2D;AACzD,QAAIA,QAAQ,KAAKf,SAAS,CAACgB,OAAvB,IAAkCD,QAAQ,KAAKf,SAAS,CAACiB,SAA7D,EACE,OAAOH,WAAP;AACFA,IAAAA,WAAW,CAACC,QAAD,CAAX,GAAwBH,KAAK,CAACG,QAAD,CAAL,CAAgBG,KAAxC;AACA,WAAOJ,WAAP;AACD,GANH,EAOE,EAPF;AASD,CAXD,C,CAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { TComponentProps, TProp } from \"~/interfaces/material_components\";\nimport {ButtonProps, EPropName} from \"~/data/ui_frameworks/material_ui/components/Button/interface\";\n\nexport const makeRandomId = (length: number): string => {\n  let result = \"\";\n  const characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nconst mapToComponentProps = (props: ButtonProps) => {\n  // TODO: タイプアサーションはあんまり良くないらしい\n  (Object.keys(props) as EPropName[]).reduce(\n    (accumulator: Record<string, any>, propName: EPropName) => {\n      if (propName === EPropName.CLASSES || propName === EPropName.COMPONENT)\n        return accumulator;\n      accumulator[propName] = props[propName].value;\n      return accumulator;\n    },\n    {}\n  );\n};\n\n// export const mapToComponentProps = (props: TProp[]): TComponentProps => {\n//   return props.reduce(\n//     (accumulator: Record<string, any>, currentValue: TProp) => {\n//       if (currentValue.name === \"children\") return accumulator;\n//       accumulator[currentValue.name] = currentValue.default;\n//       return accumulator;\n//     },\n//     {}\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}