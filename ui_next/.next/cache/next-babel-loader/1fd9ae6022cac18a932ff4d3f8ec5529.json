{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nimport \"antd/lib/menu/style\";\nimport _Menu from \"antd/lib/menu\";\nvar _jsxFileName = \"/Users/yoshiji/webdev/javascript/self_creation/ui_next/src/pages/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport update from \"immutability-helper\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport DnDContainer from \"~/components/DnDContainer\";\nimport LeftSider from \"~/components/LeftSider\";\nimport RightSider from \"~/components/RightSider\";\nimport componentGroups from \"~/data/materialComponents\";\nimport DefaultLayout from \"~/layouts/default\";\nconst {\n  SubMenu\n} = _Menu;\nconst {\n  Sider\n} = _Layout;\n\nconst makeId = length => {\n  let result = \"\";\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const charactersLength = characters.length;\n\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n};\n\nconst IndexPage = () => {\n  const {\n    0: selectedKey,\n    1: setSelectedKey\n  } = useState(\"\");\n  const {\n    0: boxes,\n    1: setBoxes\n  } = useState({});\n  const selectedComponentProps = boxes[selectedKey] && boxes[selectedKey].jsx ? boxes[selectedKey].jsx.props : [];\n\n  const addDnDBox = jsx => {\n    const key = makeId(5);\n    setBoxes(update(boxes, {\n      // TODO: この部分、型指定が出来ないの、よろしくないのでは？\n      $merge: {\n        [key]: {\n          top: 180,\n          left: 20,\n          jsx: jsx,\n          componentName: \"Button\",\n          onClick: () => setSelectedKey(key)\n        }\n      }\n    }));\n  };\n\n  const updateBoxProps = (propName, value) => {\n    if (selectedKey === \"\" || !boxes[selectedKey].jsx) return;\n    const {\n      jsx\n    } = boxes[selectedKey]; // console.log(jsx.props.writable);\n\n    const newJsx = _objectSpread({}, jsx, {\n      props: _objectSpread({}, jsx.props, {\n        [propName]: value\n      })\n    });\n\n    setBoxes(update(boxes, {\n      $merge: {\n        [selectedKey]: {\n          jsx: newJsx\n        }\n      }\n    }));\n  };\n\n  console.log(\"selected key = \", selectedKey);\n  return __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, __jsx(_Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, __jsx(LeftSider, {\n    subMenus: componentGroups,\n    selectMenu: addDnDBox,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), __jsx(DndProvider, {\n    backend: Backend,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, __jsx(DnDContainer, {\n    hideSourceOnDrag: true,\n    boxes: boxes,\n    setBoxes: setBoxes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), __jsx(RightSider, {\n    menuItems: selectedComponentProps,\n    onChange: () => updateBoxProps,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })));\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/yoshiji/webdev/javascript/self_creation/ui_next/src/pages/index.tsx"],"names":["update","React","useState","DndProvider","Backend","DnDContainer","LeftSider","RightSider","componentGroups","DefaultLayout","SubMenu","Sider","makeId","length","result","characters","charactersLength","i","charAt","Math","floor","random","IndexPage","selectedKey","setSelectedKey","boxes","setBoxes","selectedComponentProps","jsx","props","addDnDBox","key","$merge","top","left","componentName","onClick","updateBoxProps","propName","value","newJsx","console","log"],"mappings":"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","sourcesContent":["import { JSXElement } from \"@babel/types\";\nimport MaterialButton from \"@material-ui/core/Button\";\nimport { Layout, Menu, Icon } from \"antd\";\nimport update from \"immutability-helper\";\nimport { NextPage } from \"next\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { Dispatch } from \"react\";\nimport { SetStateAction } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport DnDContainer from \"~/components/DnDContainer\";\nimport LeftSider from \"~/components/LeftSider\";\nimport RightSider from \"~/components/RightSider\";\nimport componentGroups from \"~/data/materialComponents\";\nimport { TComponent, TProp } from \"~/interfaces/menu\";\nimport DefaultLayout from \"~/layouts/default\";\n\nconst { SubMenu } = Menu;\nconst { Sider } = Layout;\n\nexport type TBox = {\n  top: number;\n  left: number;\n  jsx: JSX.Element;\n  componentName: TComponent[\"title\"];\n  onClick: Dispatch<SetStateAction<string>>;\n};\nexport type TBoxes = {\n  [key: string]: TBox;\n};\nexport type IndexPageState = {\n  boxes: TBoxes;\n};\n\nconst makeId = (length: number): string => {\n  let result = \"\";\n  const characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  const charactersLength = characters.length;\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\n\nconst IndexPage: NextPage = () => {\n  const [selectedKey, setSelectedKey] = useState<string>(\"\");\n\n  const [boxes, setBoxes]: [\n    TBoxes,\n    Dispatch<SetStateAction<TBoxes>>\n  ] = useState<TBoxes>({});\n\n  const selectedComponentProps =\n    boxes[selectedKey] && boxes[selectedKey].jsx\n      ? boxes[selectedKey].jsx.props\n      : [];\n\n  const addDnDBox = (jsx: JSX.Element | undefined): void => {\n    const key = makeId(5);\n    setBoxes(\n      update(boxes, {\n        // TODO: この部分、型指定が出来ないの、よろしくないのでは？\n        $merge: {\n          [key]: {\n            top: 180,\n            left: 20,\n            jsx: jsx,\n            componentName: \"Button\",\n            onClick: () => setSelectedKey(key)\n          }\n        }\n      })\n    );\n  };\n\n  const updateBoxProps = (propName: string, value: any) => {\n    if (selectedKey === \"\" || !boxes[selectedKey].jsx) return;\n    const { jsx } = boxes[selectedKey];\n    // console.log(jsx.props.writable);\n    const newJsx = {\n      ...jsx,\n      props: {\n        ...jsx.props,\n        [propName]: value\n      }\n    };\n    setBoxes(\n      update(boxes, {\n        $merge: {\n          [selectedKey]: {\n            jsx: newJsx\n          }\n        }\n      })\n    );\n  };\n\n  console.log(\"selected key = \", selectedKey);\n\n  return (\n    <DefaultLayout>\n      <Layout>\n        <LeftSider subMenus={componentGroups} selectMenu={addDnDBox} />\n        <DndProvider backend={Backend}>\n          <DnDContainer\n            hideSourceOnDrag={true}\n            boxes={boxes}\n            setBoxes={setBoxes}\n          />\n        </DndProvider>\n        <RightSider\n          menuItems={selectedComponentProps}\n          onChange={() => updateBoxProps}\n        />\n      </Layout>\n    </DefaultLayout>\n  );\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}