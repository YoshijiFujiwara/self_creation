{"ast":null,"code":"import \"antd/lib/icon/style\";\nimport _Icon from \"antd/lib/icon\";\nimport \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nimport \"antd/lib/menu/style\";\nimport _Menu from \"antd/lib/menu\";\nvar _jsxFileName = \"/Users/yoshiji/webdev/javascript/self_creation/ui_next/src/pages/index.tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport DefaultLayout from \"~/layouts/default\";\nimport subMenus from \"~/data/subMenus\";\nimport { DndProvider, useDrop } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport DnDContainer from \"~/components/DnDContainer\";\nimport { useState } from \"react\";\nimport update from \"immutability-helper\";\nimport dndItemTypes from \"~/data/dndItemTypes\";\nconst {\n  SubMenu\n} = _Menu;\nconst {\n  Sider\n} = _Layout;\n\nconst IndexPage = () => {\n  const {\n    0: boxes,\n    1: setBoxes\n  } = useState({\n    a: {\n      top: 20,\n      left: 80,\n      title: \"Drag me around\"\n    },\n    b: {\n      top: 180,\n      left: 20,\n      title: \"Drag me too\"\n    }\n  });\n\n  const moveBox = (id, left, top) => {\n    setBoxes(update(boxes, {\n      [id]: {\n        $merge: {\n          left,\n          top\n        }\n      }\n    }));\n  };\n\n  const [, drop] = useDrop({\n    accept: dndItemTypes.BOX,\n\n    drop(item, monitor) {\n      const delta = monitor.getDifferenceFromInitialOffset();\n      const left = Math.round(item.left + delta.x);\n      const top = Math.round(item.top + delta.y);\n      moveBox(item.id, left, top);\n      return undefined;\n    }\n\n  });\n\n  const makeid = length => {\n    let result = \"\";\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const charactersLength = characters.length;\n\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    return result;\n  };\n\n  const addDnDBox = title => {\n    const key = makeid(5);\n    boxes[key] = {\n      top: 180,\n      left: 200,\n      title\n    };\n    setBoxes(boxes);\n  };\n\n  return __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, __jsx(_Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(Sider, {\n    width: 200,\n    style: {\n      background: \"#fff\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(_Menu, {\n    mode: \"inline\",\n    defaultSelectedKeys: [\"1\"],\n    defaultOpenKeys: [\"sub1\"],\n    style: {\n      height: \"100%\",\n      borderRight: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, subMenus.map((subMenu, subMenuIndex) => __jsx(SubMenu, {\n    key: subMenuIndex,\n    title: __jsx(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, __jsx(_Icon, {\n      type: subMenu.iconType,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), subMenu.title),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, subMenu.menuItems.map((item, itemIndex) => __jsx(_Menu.Item, {\n    key: `${subMenuIndex}-${itemIndex}`,\n    onClick: () => addDnDBox(item.title),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, item.title)))))), __jsx(DndProvider, {\n    backend: Backend,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, __jsx(DnDContainer, {\n    hideSourceOnDrag: true,\n    drop: drop,\n    boxes: boxes,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }))));\n};\n\nexport default IndexPage;","map":{"version":3,"sources":["/Users/yoshiji/webdev/javascript/self_creation/ui_next/src/pages/index.tsx"],"names":["React","DefaultLayout","subMenus","DndProvider","useDrop","Backend","DnDContainer","useState","update","dndItemTypes","SubMenu","Sider","IndexPage","boxes","setBoxes","a","top","left","title","b","moveBox","id","$merge","drop","accept","BOX","item","monitor","delta","getDifferenceFromInitialOffset","Math","round","x","y","undefined","makeid","length","result","characters","charactersLength","i","charAt","floor","random","addDnDBox","key","background","height","borderRight","map","subMenu","subMenuIndex","iconType","menuItems","itemIndex"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Layout, Menu, Icon } from \"antd\";\nimport DefaultLayout from \"~/layouts/default\";\nimport { NextPage } from \"next\";\nimport { TMenuItem, TSubMenu } from \"~/interfaces/menu\";\nimport subMenus from \"~/data/subMenus\";\nimport { DndProvider, useDrop, XYCoord } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport DnDContainer from \"~/components/DnDContainer\";\nimport { useState } from \"react\";\nimport update from \"immutability-helper\";\nimport dndItemTypes from \"~/data/dndItemTypes\";\nimport { DragItem } from \"~/interfaces/drag_item\";\n\nconst { SubMenu } = Menu;\nconst { Sider } = Layout;\n\nexport type IndexPageState = {\n  boxes: { [key: string]: { top: number; left: number; title: string } };\n};\n\nconst IndexPage: NextPage = () => {\n  const [boxes, setBoxes] = useState<{\n    [key: string]: {\n      top: number;\n      left: number;\n      title: string;\n    };\n  }>({\n    a: { top: 20, left: 80, title: \"Drag me around\" },\n    b: { top: 180, left: 20, title: \"Drag me too\" }\n  });\n\n  const moveBox = (id: string, left: number, top: number) => {\n    setBoxes(\n      update(boxes, {\n        [id]: {\n          $merge: { left, top }\n        }\n      })\n    );\n  };\n\n  const [, drop] = useDrop({\n    accept: dndItemTypes.BOX,\n    drop(item: DragItem, monitor) {\n      const delta = monitor.getDifferenceFromInitialOffset() as XYCoord;\n      const left = Math.round(item.left + delta.x);\n      const top = Math.round(item.top + delta.y);\n      moveBox(item.id, left, top);\n      return undefined;\n    }\n  });\n\n  const makeid: Function = (length: number): string => {\n    let result = \"\";\n    const characters =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    const charactersLength = characters.length;\n    for (let i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n  };\n\n  const addDnDBox: Function = (title: string): void => {\n    const key = makeid(5);\n    boxes[key] = { top: 180, left: 200, title };\n    setBoxes(boxes);\n  };\n\n  return (\n    <DefaultLayout>\n      <Layout>\n        <Sider width={200} style={{ background: \"#fff\" }}>\n          <Menu\n            mode=\"inline\"\n            defaultSelectedKeys={[\"1\"]}\n            defaultOpenKeys={[\"sub1\"]}\n            style={{ height: \"100%\", borderRight: 0 }}\n          >\n            {subMenus.map((subMenu: TSubMenu, subMenuIndex: number) => (\n              <SubMenu\n                key={subMenuIndex}\n                title={\n                  <span>\n                    <Icon type={subMenu.iconType} />\n                    {subMenu.title}\n                  </span>\n                }\n              >\n                {subMenu.menuItems.map((item: TMenuItem, itemIndex: number) => (\n                  <Menu.Item\n                    key={`${subMenuIndex}-${itemIndex}`}\n                    onClick={(): void => addDnDBox(item.title)}\n                  >\n                    {item.title}\n                  </Menu.Item>\n                ))}\n              </SubMenu>\n            ))}\n          </Menu>\n        </Sider>\n        <DndProvider backend={Backend}>\n          <DnDContainer hideSourceOnDrag={true} drop={drop} boxes={boxes} />\n        </DndProvider>\n      </Layout>\n    </DefaultLayout>\n  );\n};\n\nexport default IndexPage;\n"]},"metadata":{},"sourceType":"module"}