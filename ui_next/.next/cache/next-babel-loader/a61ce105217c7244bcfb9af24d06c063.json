{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nvar _jsxFileName = \"/Users/yoshiji/webdev/javascript/self_creation/ui_next/src/components/DnDContainer.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport ItemTypes from \"~/data/dndItemTypes\";\nimport DnDBox from \"./DnDBox\";\nimport update from \"immutability-helper\";\nimport \"dnd_container.less\";\n\nconst DndContainer = ({\n  hideSourceOnDrag\n}) => {\n  const {\n    0: boxes,\n    1: setBoxes\n  } = useState({\n    a: {\n      top: 20,\n      left: 80,\n      title: \"Drag me around\"\n    },\n    b: {\n      top: 180,\n      left: 20,\n      title: \"Drag me too\"\n    }\n  });\n\n  const moveBox = (id, left, top) => {\n    setBoxes(update(boxes, {\n      [id]: {\n        $merge: {\n          left,\n          top\n        }\n      }\n    }));\n  };\n\n  const [, drop] = useDrop({\n    accept: ItemTypes.BOX,\n\n    drop(item, monitor) {\n      const delta = monitor.getDifferenceFromInitialOffset();\n      const left = Math.round(item.left + delta.x);\n      const top = Math.round(item.top + delta.y);\n      moveBox(item.id, left, top);\n      return undefined;\n    }\n\n  });\n  return __jsx(\"div\", {\n    ref: drop,\n    className: \"dnd_container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, _Object$keys(boxes).map(key => {\n    const {\n      left,\n      top,\n      title\n    } = boxes[key];\n    return __jsx(DnDBox, {\n      key: key,\n      id: key,\n      left: left,\n      top: top,\n      hideSourceOnDrag: hideSourceOnDrag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, title);\n  }));\n};\n\nexport default DndContainer;","map":{"version":3,"sources":["/Users/yoshiji/webdev/javascript/self_creation/ui_next/src/components/DnDContainer.tsx"],"names":["React","useState","useDrop","ItemTypes","DnDBox","update","DndContainer","hideSourceOnDrag","boxes","setBoxes","a","top","left","title","b","moveBox","id","$merge","drop","accept","BOX","item","monitor","delta","getDifferenceFromInitialOffset","Math","round","x","y","undefined","map","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAiC,WAAjC;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,OAAO,oBAAP;;AAUA,MAAMC,YAAsC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA0B;AACvE,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAM/B;AACDS,IAAAA,CAAC,EAAE;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,IAAI,EAAE,EAAjB;AAAqBC,MAAAA,KAAK,EAAE;AAA5B,KADF;AAEDC,IAAAA,CAAC,EAAE;AAAEH,MAAAA,GAAG,EAAE,GAAP;AAAYC,MAAAA,IAAI,EAAE,EAAlB;AAAsBC,MAAAA,KAAK,EAAE;AAA7B;AAFF,GAN+B,CAAlC;;AAWA,QAAME,OAAO,GAAG,CAACC,EAAD,EAAaJ,IAAb,EAA2BD,GAA3B,KAA2C;AACzDF,IAAAA,QAAQ,CACNJ,MAAM,CAACG,KAAD,EAAQ;AACZ,OAACQ,EAAD,GAAM;AACJC,QAAAA,MAAM,EAAE;AAAEL,UAAAA,IAAF;AAAQD,UAAAA;AAAR;AADJ;AADM,KAAR,CADA,CAAR;AAOD,GARD;;AAUA,QAAM,GAAGO,IAAH,IAAWhB,OAAO,CAAC;AACvBiB,IAAAA,MAAM,EAAEhB,SAAS,CAACiB,GADK;;AAEvBF,IAAAA,IAAI,CAACG,IAAD,EAAiBC,OAAjB,EAA0B;AAC5B,YAAMC,KAAK,GAAGD,OAAO,CAACE,8BAAR,EAAd;AACA,YAAMZ,IAAI,GAAGa,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACT,IAAL,GAAYW,KAAK,CAACI,CAA7B,CAAb;AACA,YAAMhB,GAAG,GAAGc,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACV,GAAL,GAAWY,KAAK,CAACK,CAA5B,CAAZ;AACAb,MAAAA,OAAO,CAACM,IAAI,CAACL,EAAN,EAAUJ,IAAV,EAAgBD,GAAhB,CAAP;AACA,aAAOkB,SAAP;AACD;;AARsB,GAAD,CAAxB;AAWA,SACE;AAAK,IAAA,GAAG,EAAEX,IAAV;AAAgB,IAAA,SAAS,EAAC,eAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,aAAYV,KAAZ,EAAmBsB,GAAnB,CAAuBC,GAAG,IAAI;AAC7B,UAAM;AAAEnB,MAAAA,IAAF;AAAQD,MAAAA,GAAR;AAAaE,MAAAA;AAAb,QAAuBL,KAAK,CAACuB,GAAD,CAAlC;AACA,WACE,MAAC,MAAD;AACE,MAAA,GAAG,EAAEA,GADP;AAEE,MAAA,EAAE,EAAEA,GAFN;AAGE,MAAA,IAAI,EAAEnB,IAHR;AAIE,MAAA,GAAG,EAAED,GAJP;AAKE,MAAA,gBAAgB,EAAEJ,gBALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGM,KAPH,CADF;AAWD,GAbA,CADH,CADF;AAkBD,CAnDD;;AAoDA,eAAeP,YAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useDrop, XYCoord } from \"react-dnd\";\nimport ItemTypes from \"~/data/dndItemTypes\";\nimport DnDBox from \"./DnDBox\";\nimport update from \"immutability-helper\";\nimport { DragItem } from \"./interfaces\";\nimport \"dnd_container.less\";\n\nexport interface ContainerProps {\n  hideSourceOnDrag: boolean;\n}\n\nexport interface ContainerState {\n  boxes: { [key: string]: { top: number; left: number; title: string } };\n}\n\nconst DndContainer: React.FC<ContainerProps> = ({ hideSourceOnDrag }) => {\n  const [boxes, setBoxes] = useState<{\n    [key: string]: {\n      top: number;\n      left: number;\n      title: string;\n    };\n  }>({\n    a: { top: 20, left: 80, title: \"Drag me around\" },\n    b: { top: 180, left: 20, title: \"Drag me too\" }\n  });\n\n  const moveBox = (id: string, left: number, top: number) => {\n    setBoxes(\n      update(boxes, {\n        [id]: {\n          $merge: { left, top }\n        }\n      })\n    );\n  };\n\n  const [, drop] = useDrop({\n    accept: ItemTypes.BOX,\n    drop(item: DragItem, monitor) {\n      const delta = monitor.getDifferenceFromInitialOffset() as XYCoord;\n      const left = Math.round(item.left + delta.x);\n      const top = Math.round(item.top + delta.y);\n      moveBox(item.id, left, top);\n      return undefined;\n    }\n  });\n\n  return (\n    <div ref={drop} className=\"dnd_container\">\n      {Object.keys(boxes).map(key => {\n        const { left, top, title } = boxes[key];\n        return (\n          <DnDBox\n            key={key}\n            id={key}\n            left={left}\n            top={top}\n            hideSourceOnDrag={hideSourceOnDrag}\n          >\n            {title}\n          </DnDBox>\n        );\n      })}\n    </div>\n  );\n};\nexport default DndContainer;\n"]},"metadata":{},"sourceType":"module"}