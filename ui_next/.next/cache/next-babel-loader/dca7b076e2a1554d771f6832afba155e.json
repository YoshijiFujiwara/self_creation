{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/yoshiji/webdev/javascript/self_creation/ui_next/src/components/Container.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { DropTarget } from \"react-dnd\";\nimport DnDItemTypes from \"./DnDItemTypes\";\nimport Box from \"./Box\";\nimport update from \"immutability-helper\";\nvar styles = {\n  border: \"1px solid black\",\n  position: \"relative\"\n};\n\nvar Container =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Container, _React$Component);\n\n  function Container() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Container)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      boxes: {\n        a: {\n          top: 20,\n          left: 80,\n          title: \"Drag me around\"\n        },\n        b: {\n          top: 180,\n          left: 20,\n          title: \"Drag me too\"\n        }\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          hideSourceOnDrag = _this$props.hideSourceOnDrag,\n          connectDropTarget = _this$props.connectDropTarget;\n      var boxes = this.state.boxes;\n      return connectDropTarget(__jsx(\"div\", {\n        style: styles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, _Object$keys(boxes).map(function (key) {\n        var _boxes$key = boxes[key],\n            left = _boxes$key.left,\n            top = _boxes$key.top,\n            title = _boxes$key.title;\n        return __jsx(Box, {\n          key: key,\n          id: key,\n          left: left,\n          top: top,\n          hideSourceOnDrag: hideSourceOnDrag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, title);\n      })));\n    }\n  }, {\n    key: \"moveBox\",\n    value: function moveBox(id, left, top) {\n      this.setState(update(this.state, {\n        boxes: _defineProperty({}, id, {\n          $merge: {\n            left: left,\n            top: top\n          }\n        })\n      }));\n    }\n  }]);\n\n  return Container;\n}(React.Component);\n\nexport default DropTarget(DnDItemTypes.BOX, {\n  drop: function drop(props, monitor, component) {\n    if (!component) {\n      return;\n    }\n\n    var item = monitor.getItem();\n    var delta = monitor.getDifferenceFromInitialOffset();\n    var left = Math.round(item.left + delta.x);\n    var top = Math.round(item.top + delta.y);\n    component.moveBox(item.id, left, top);\n  }\n}, function (connect) {\n  return {\n    connectDropTarget: connect.dropTarget()\n  };\n})(Container);","map":{"version":3,"sources":["/Users/yoshiji/webdev/javascript/self_creation/ui_next/src/components/Container.tsx"],"names":["React","DropTarget","DnDItemTypes","Box","update","styles","border","position","Container","boxes","a","top","left","title","b","props","hideSourceOnDrag","connectDropTarget","state","map","key","id","setState","$merge","Component","BOX","drop","monitor","component","item","getItem","delta","getDifferenceFromInitialOffset","Math","round","x","y","moveBox","connect","dropTarget"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { ConnectDropTarget, DropTargetMonitor, XYCoord } from \"react-dnd\";\nimport { DropTarget } from \"react-dnd\";\nimport DnDItemTypes from \"./DnDItemTypes\";\nimport Box from \"./Box\";\nimport update from \"immutability-helper\";\n\nconst styles: React.CSSProperties = {\n  border: \"1px solid black\",\n  position: \"relative\"\n};\n\nexport interface ContainerProps {\n  hideSourceOnDrag: boolean;\n  connectDropTarget: ConnectDropTarget;\n}\n\nexport interface ContainerState {\n  boxes: { [key: string]: { top: number; left: number; title: string } };\n}\n\nclass Container extends React.Component<ContainerProps, ContainerState> {\n  public state: ContainerState = {\n    boxes: {\n      a: { top: 20, left: 80, title: \"Drag me around\" },\n      b: { top: 180, left: 20, title: \"Drag me too\" }\n    }\n  };\n\n  public render() {\n    const { hideSourceOnDrag, connectDropTarget } = this.props;\n    const { boxes } = this.state;\n\n    return connectDropTarget(\n      <div style={styles}>\n        {Object.keys(boxes).map(key => {\n          const { left, top, title } = boxes[key];\n          return (\n            <Box\n              key={key}\n              id={key}\n              left={left}\n              top={top}\n              hideSourceOnDrag={hideSourceOnDrag}\n            >\n              {title}\n            </Box>\n          );\n        })}\n      </div>\n    );\n  }\n\n  public moveBox(id: string, left: number, top: number) {\n    this.setState(\n      update(this.state, {\n        boxes: {\n          [id]: {\n            $merge: { left, top }\n          }\n        }\n      })\n    );\n  }\n}\n\nexport default DropTarget(\n  DnDItemTypes.BOX,\n  {\n    drop(\n      props: ContainerProps,\n      monitor: DropTargetMonitor,\n      component: Container | null\n    ) {\n      if (!component) {\n        return;\n      }\n      const item = monitor.getItem();\n      const delta = monitor.getDifferenceFromInitialOffset() as XYCoord;\n      const left = Math.round(item.left + delta.x);\n      const top = Math.round(item.top + delta.y);\n\n      component.moveBox(item.id, left, top);\n    }\n  },\n  (connect: any) => ({\n    connectDropTarget: connect.dropTarget()\n  })\n)(Container);\n"]},"metadata":{},"sourceType":"module"}