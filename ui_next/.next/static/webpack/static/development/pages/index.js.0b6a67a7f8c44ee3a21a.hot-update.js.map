{"version":3,"file":"static/webpack/static/development/pages/index.js.0b6a67a7f8c44ee3a21a.hot-update.js","sources":["webpack:///./src/data/ui_frameworks/material_ui/component_groups/index.ts","webpack:///./src/pages/index.tsx"],"sourcesContent":["import dataDisplayComponentGroup from \"~/data/ui_frameworks/material_ui/component_groups/Data_Display\";\nimport feedbackComponentGroup from \"~/data/ui_frameworks/material_ui/component_groups/Feedback\";\nimport inputComponentGroup from \"~/data/ui_frameworks/material_ui/component_groups/Inputs\";\nimport layoutComponentGroup from \"~/data/ui_frameworks/material_ui/component_groups/Layouts\";\nimport navigationComponentGroup from \"~/data/ui_frameworks/material_ui/component_groups/Navigation\";\nimport surfacesComponentGroup from \"~/data/ui_frameworks/material_ui/component_groups/Surfaces\";\nimport { TComponentGroup } from \"~/interfaces/material_components\";\n\nconst componentGroups: TComponentGroup[] = [\n  layoutComponentGroup,\n  inputComponentGroup,\n  navigationComponentGroup,\n  surfacesComponentGroup,\n  feedbackComponentGroup,\n  dataDisplayComponentGroup\n];\n\nexport default componentGroups;\n","import { Layout } from \"antd\";\nimport update from \"immutability-helper\";\nimport { NextPage } from \"next\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { Dispatch } from \"react\";\nimport { SetStateAction } from \"react\";\nimport { DndProvider } from \"react-dnd\";\nimport Backend from \"react-dnd-html5-backend\";\nimport DnDContainer from \"~/components/DnDContainer\";\nimport LeftSider from \"~/components/LeftSider\";\nimport RightSider from \"~/components/RightSider\";\nimport { RightSiderProps } from \"~/components/RightSider\";\nimport componentGroups from \"~/data/ui_frameworks/material_ui/component_groups\";\nimport { TComponent } from \"~/interfaces/material_components\";\nimport DefaultLayout from \"~/layouts/default\";\nimport axiosInstance from \"~/plugins/axios\";\nimport { makeRandomId } from \"~/utils\";\n\nexport type TBox = {\n  top: number;\n  left: number;\n  jsx: JSX.Element;\n  componentName: TComponent[\"title\"];\n  onClick: Dispatch<SetStateAction<string>>;\n};\nexport type TBoxes = {\n  [key: string]: TBox;\n};\nexport type IndexPageState = {\n  boxes: TBoxes;\n};\nexport type TRequestSave = {\n  [key: string]: {\n    top: number;\n    left: number;\n    jsx: JSX.Element;\n    componentName: TComponent[\"title\"];\n  };\n};\n\nconst IndexPage: NextPage = () => {\n  const [selectedKey, setSelectedKey] = useState<string>(\"\");\n\n  const [boxes, setBoxes]: [\n    TBoxes,\n    Dispatch<SetStateAction<TBoxes>>\n  ] = useState<TBoxes>({});\n\n  const selectedComponentProps =\n    boxes[selectedKey] && boxes[selectedKey].jsx\n      ? boxes[selectedKey].jsx.props\n      : [];\n\n  // TODO: マテリアルコンポーネントの設定が終わり、undefinedがくることがなくなれば、`| undefined`は除去する\n  const addDnDBox = (jsx: JSX.Element | undefined): void => {\n    const key = makeRandomId(5);\n    setBoxes(\n      update(boxes, {\n        // TODO: この部分、型指定が出来ないの、よろしくないのでは？\n        $merge: {\n          [key]: {\n            top: 180, // TODO: 初期値をハードコーディングしておる\n            left: 20,\n            jsx,\n            componentName: \"Button\", // TODO: コンポーネントネームのハードコーディング\n            onClick: () => setSelectedKey(key)\n          }\n        }\n      })\n    );\n  };\n\n  const updateBoxProps: RightSiderProps[\"onChange\"] = (\n    propName: string,\n    value: any\n  ) => {\n    if (selectedKey === \"\" || !boxes[selectedKey].jsx) return;\n    const box = boxes[selectedKey];\n    const newJsx = {\n      ...box.jsx,\n      props: {\n        ...box.jsx.props,\n        [propName]: value\n      }\n    };\n    setBoxes(\n      update(boxes, {\n        $merge: {\n          [selectedKey]: {\n            ...box,\n            jsx: newJsx\n          }\n        }\n      })\n    );\n  };\n\n  const saveBoxes = () => {\n    // stateのboxのonChangeプロパティ以外を渡す\n    const reqBody: TRequestSave = {};\n    Object.keys(boxes).forEach(key => {\n      const { top, left, jsx, componentName } = boxes[key];\n      reqBody[key] = { top, left, jsx, componentName };\n    });\n\n    axiosInstance\n      .put(\"/save_boxes\", reqBody)\n      .then(res => {\n        console.log(res);\n      })\n      .catch(e => {\n        console.error(e);\n      });\n  };\n\n  return (\n    <DefaultLayout>\n      <Layout>\n        <LeftSider subMenus={componentGroups} selectMenu={addDnDBox} />\n        <DndProvider backend={Backend}>\n          <DnDContainer\n            hideSourceOnDrag={true}\n            boxes={boxes}\n            setBoxes={setBoxes}\n          />\n        </DndProvider>\n        <RightSider\n          menuItems={selectedComponentProps}\n          onChange={updateBoxProps}\n        />\n      </Layout>\n      <button onClick={() => saveBoxes()}>テスト用の保存ボタン</button>\n    </DefaultLayout>\n  );\n};\n\nexport default IndexPage;\n"],"mappings":";;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAuBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAOA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AALA;AAHA;AAaA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAEA;AAFA;AACA;AAMA;AAEA;AAGA;AAHA;AADA;AASA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}